buildscript {
    dependencies {
        classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:1.0.10"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.10'
    id 'io.spring.dependency-management' version '1.1.0'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'share_diary'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'    // lombok과 mapstruct 함께 쓸 때 순서 충돌 문제 해결용
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

//    h2
    runtimeOnly 'com.h2database:h2'

//    mysql
    runtimeOnly 'com.mysql:mysql-connector-j'

//    JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

//    encrypt
    implementation 'org.springframework.security:spring-security-crypto'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'

//    validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

//    mailing
    implementation 'org.springframework.boot:spring-boot-starter-mail'

//    mockito
    testImplementation 'org.mockito:mockito-core'

//    mapstruct
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

//  QueryDSL
    implementation "com.querydsl:querydsl-core:5.0.0"
    implementation "com.querydsl:querydsl-jpa:5.0.0"
    implementation "com.querydsl:querydsl-apt:5.0.0"
    implementation "com.querydsl:querydsl-sql:5.0.0"

//    redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

//    sql logging
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.6'

//    rest assured
    testImplementation 'io.rest-assured:rest-assured:4.4.0'
//    guava
    implementation 'com.google.guava:guava:11.0.2'
//    aop
    implementation 'org.springframework.boot:spring-boot-starter-aop'
//    swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'
//    test-containers
    testImplementation group: 'org.testcontainers', name: 'testcontainers', version: '1.17.2'
//    RestDocs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

//ext['spring-security.version']='5.8.4'

tasks.named('test') {
    useJUnitPlatform()
}

jar{
    enabled=false
}

ext { // 전역 변수
    snippetsDir = file('build/generated-snippets')
}

test{
    outputs.dir snippetsDir
//    exclude '**/*'
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'

    sources { // 특정 파일만 html로 만든다.
        include("**/index.adoc")
    }
    baseDirFollowsSourceFile() // 다른 adoc 파일을 include 할 때 경로를 baseDir로 맞춘다.
    dependsOn test
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}

def querydslDir = "$projectDir/build/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDir querydslDir
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
